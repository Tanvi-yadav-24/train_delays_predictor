# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PC9DtgvoK33pzmgAYtKMbqcmU9u6ZcRU
"""

!pip install streamlit

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import joblib
import networkx as nx

# --- Load Data and Models ---
df = pd.read_csv("train_data.csv")
ripple_df = pd.read_csv("ripple_pairs.csv")
model = joblib.load("delay_predictor.pkl")

# --- Title and Introduction ---
st.title("üöÇ Indian Railway Delay Prediction & Ripple Effect Analysis")
st.markdown("""
This app predicts the delay of Indian trains and visualizes how delays propagate (ripple) across other trains at shared stations.
""")

# --- Delay Prediction Section ---
st.header("üîÆ Predict Delay at Next Station")

train_id = st.selectbox("Select Train ID", df['train_id'].unique())
train_df = df[df['train_id'] == train_id]

station_code = st.selectbox("Select Current Station", train_df['station_code'].unique())
station_order = int(train_df[train_df['station_code'] == station_code]['station_order'].iloc[0])

prev_delay = st.number_input("Previous Station Delay (in minutes)", min_value=0)
delay_arrival = st.number_input("Current Station Delay (in minutes)", min_value=0)

station_code_enc = df[df['station_code'] == station_code]['station_code_enc'].values[0]
train_id_enc = df[df['train_id'] == train_id]['train_id_enc'].values[0]

if st.button("üìç Predict Delay at Next Station"):
    input_vec = [[station_order, prev_delay, delay_arrival, station_code_enc, train_id_enc]]
    predicted_delay = model.predict(input_vec)[0]
    st.success(f"Expected Delay at Next Station: **{predicted_delay:.2f} minutes**")

# --- Ripple Effect Classifier ---
st.header("üåä Ripple Effect Prediction")

lead_delay_input = st.slider("Lead Train Delay (in minutes)", min_value=0, max_value=120, value=10)
delta_input = st.slider("Gap Between Trains at Same Station (in minutes)", min_value=0, max_value=60, value=10)

if st.button("üì° Predict Ripple Effect"):
    ripple_prob = clf.predict_proba([[lead_delay_input, delta_input]])[0][1]
    st.info(f"Probability that a downstream train will be significantly delayed: **{ripple_prob*100:.2f}%**")

# --- Visual Insights ---
st.header("üìä Visual Insights")

if st.checkbox("Top 10 Delayed Stations"):
    station_delay = df.groupby('station_code')['delay_arrival'].mean().sort_values(ascending=False).head(10)
    st.bar_chart(station_delay)

if st.checkbox("Most Disruptive Trains (Ripple Effect)"):
    ripple_causes = ripple_df.groupby('lead_train')['target_train'].count().sort_values(ascending=False).head(10)
    st.bar_chart(ripple_causes)

if st.checkbox("Ripple Effect Network Graph"):
    G = nx.DiGraph()
    for _, row in ripple_df.iterrows():
        G.add_edge(row['lead_train'], row['target_train'], weight=row['lead_delay'])
    plt.figure(figsize=(10,7))
    pos = nx.spring_layout(G, k=0.3)
    nx.draw(G, pos, with_labels=True, node_size=500, node_color='skyblue', edge_color='gray', font_size=7)
    st.pyplot(plt.gcf())

if st.checkbox("Show Ripple Effect Data Table"):
    st.dataframe(ripple_df.head(30))

st.caption("Made with ‚ù§Ô∏è for Indian Railway Delay Analytics")
